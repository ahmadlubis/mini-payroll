// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "payslip-system/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserRepository) Create(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserRepository)(nil).Create), user)
}

// GetAllEmployees mocks base method.
func (m *MockIUserRepository) GetAllEmployees() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployees")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployees indicates an expected call of GetAllEmployees.
func (mr *MockIUserRepositoryMockRecorder) GetAllEmployees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployees", reflect.TypeOf((*MockIUserRepository)(nil).GetAllEmployees))
}

// GetByID mocks base method.
func (m *MockIUserRepository) GetByID(id uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIUserRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUserRepository)(nil).GetByID), id)
}

// GetByUsername mocks base method.
func (m *MockIUserRepository) GetByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockIUserRepositoryMockRecorder) GetByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockIUserRepository)(nil).GetByUsername), username)
}

// Update mocks base method.
func (m *MockIUserRepository) Update(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUserRepositoryMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserRepository)(nil).Update), user)
}

// MockIAttendancePeriodRepository is a mock of IAttendancePeriodRepository interface.
type MockIAttendancePeriodRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAttendancePeriodRepositoryMockRecorder
}

// MockIAttendancePeriodRepositoryMockRecorder is the mock recorder for MockIAttendancePeriodRepository.
type MockIAttendancePeriodRepositoryMockRecorder struct {
	mock *MockIAttendancePeriodRepository
}

// NewMockIAttendancePeriodRepository creates a new mock instance.
func NewMockIAttendancePeriodRepository(ctrl *gomock.Controller) *MockIAttendancePeriodRepository {
	mock := &MockIAttendancePeriodRepository{ctrl: ctrl}
	mock.recorder = &MockIAttendancePeriodRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAttendancePeriodRepository) EXPECT() *MockIAttendancePeriodRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAttendancePeriodRepository) Create(period *models.AttendancePeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", period)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIAttendancePeriodRepositoryMockRecorder) Create(period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAttendancePeriodRepository)(nil).Create), period)
}

// GetActive mocks base method.
func (m *MockIAttendancePeriodRepository) GetActive() (*models.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActive")
	ret0, _ := ret[0].(*models.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActive indicates an expected call of GetActive.
func (mr *MockIAttendancePeriodRepositoryMockRecorder) GetActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActive", reflect.TypeOf((*MockIAttendancePeriodRepository)(nil).GetActive))
}

// GetAll mocks base method.
func (m *MockIAttendancePeriodRepository) GetAll() ([]models.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIAttendancePeriodRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIAttendancePeriodRepository)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockIAttendancePeriodRepository) GetByID(id uuid.UUID) (*models.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIAttendancePeriodRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIAttendancePeriodRepository)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockIAttendancePeriodRepository) Update(period *models.AttendancePeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", period)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIAttendancePeriodRepositoryMockRecorder) Update(period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIAttendancePeriodRepository)(nil).Update), period)
}

// MockIAttendanceRepository is a mock of IAttendanceRepository interface.
type MockIAttendanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAttendanceRepositoryMockRecorder
}

// MockIAttendanceRepositoryMockRecorder is the mock recorder for MockIAttendanceRepository.
type MockIAttendanceRepositoryMockRecorder struct {
	mock *MockIAttendanceRepository
}

// NewMockIAttendanceRepository creates a new mock instance.
func NewMockIAttendanceRepository(ctrl *gomock.Controller) *MockIAttendanceRepository {
	mock := &MockIAttendanceRepository{ctrl: ctrl}
	mock.recorder = &MockIAttendanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAttendanceRepository) EXPECT() *MockIAttendanceRepositoryMockRecorder {
	return m.recorder
}

// CountWorkingDaysInPeriod mocks base method.
func (m *MockIAttendanceRepository) CountWorkingDaysInPeriod(startDate, endDate time.Time) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWorkingDaysInPeriod", startDate, endDate)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountWorkingDaysInPeriod indicates an expected call of CountWorkingDaysInPeriod.
func (mr *MockIAttendanceRepositoryMockRecorder) CountWorkingDaysInPeriod(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWorkingDaysInPeriod", reflect.TypeOf((*MockIAttendanceRepository)(nil).CountWorkingDaysInPeriod), startDate, endDate)
}

// Create mocks base method.
func (m *MockIAttendanceRepository) Create(attendance *models.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", attendance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIAttendanceRepositoryMockRecorder) Create(attendance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAttendanceRepository)(nil).Create), attendance)
}

// GetByUserAndDate mocks base method.
func (m *MockIAttendanceRepository) GetByUserAndDate(userID uuid.UUID, date time.Time) (*models.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserAndDate", userID, date)
	ret0, _ := ret[0].(*models.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserAndDate indicates an expected call of GetByUserAndDate.
func (mr *MockIAttendanceRepositoryMockRecorder) GetByUserAndDate(userID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserAndDate", reflect.TypeOf((*MockIAttendanceRepository)(nil).GetByUserAndDate), userID, date)
}

// GetByUserAndPeriod mocks base method.
func (m *MockIAttendanceRepository) GetByUserAndPeriod(userID, periodID uuid.UUID) ([]models.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserAndPeriod", userID, periodID)
	ret0, _ := ret[0].([]models.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserAndPeriod indicates an expected call of GetByUserAndPeriod.
func (mr *MockIAttendanceRepositoryMockRecorder) GetByUserAndPeriod(userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserAndPeriod", reflect.TypeOf((*MockIAttendanceRepository)(nil).GetByUserAndPeriod), userID, periodID)
}

// MockIOvertimeRepository is a mock of IOvertimeRepository interface.
type MockIOvertimeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOvertimeRepositoryMockRecorder
}

// MockIOvertimeRepositoryMockRecorder is the mock recorder for MockIOvertimeRepository.
type MockIOvertimeRepositoryMockRecorder struct {
	mock *MockIOvertimeRepository
}

// NewMockIOvertimeRepository creates a new mock instance.
func NewMockIOvertimeRepository(ctrl *gomock.Controller) *MockIOvertimeRepository {
	mock := &MockIOvertimeRepository{ctrl: ctrl}
	mock.recorder = &MockIOvertimeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOvertimeRepository) EXPECT() *MockIOvertimeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIOvertimeRepository) Create(overtime *models.Overtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", overtime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIOvertimeRepositoryMockRecorder) Create(overtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIOvertimeRepository)(nil).Create), overtime)
}

// GetByUserAndDate mocks base method.
func (m *MockIOvertimeRepository) GetByUserAndDate(userID uuid.UUID, date time.Time) (*models.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserAndDate", userID, date)
	ret0, _ := ret[0].(*models.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserAndDate indicates an expected call of GetByUserAndDate.
func (mr *MockIOvertimeRepositoryMockRecorder) GetByUserAndDate(userID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserAndDate", reflect.TypeOf((*MockIOvertimeRepository)(nil).GetByUserAndDate), userID, date)
}

// GetByUserAndPeriod mocks base method.
func (m *MockIOvertimeRepository) GetByUserAndPeriod(userID, periodID uuid.UUID) ([]models.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserAndPeriod", userID, periodID)
	ret0, _ := ret[0].([]models.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserAndPeriod indicates an expected call of GetByUserAndPeriod.
func (mr *MockIOvertimeRepositoryMockRecorder) GetByUserAndPeriod(userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserAndPeriod", reflect.TypeOf((*MockIOvertimeRepository)(nil).GetByUserAndPeriod), userID, periodID)
}

// MockIReimbursementRepository is a mock of IReimbursementRepository interface.
type MockIReimbursementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIReimbursementRepositoryMockRecorder
}

// MockIReimbursementRepositoryMockRecorder is the mock recorder for MockIReimbursementRepository.
type MockIReimbursementRepositoryMockRecorder struct {
	mock *MockIReimbursementRepository
}

// NewMockIReimbursementRepository creates a new mock instance.
func NewMockIReimbursementRepository(ctrl *gomock.Controller) *MockIReimbursementRepository {
	mock := &MockIReimbursementRepository{ctrl: ctrl}
	mock.recorder = &MockIReimbursementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReimbursementRepository) EXPECT() *MockIReimbursementRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIReimbursementRepository) Create(reimbursement *models.Reimbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", reimbursement)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIReimbursementRepositoryMockRecorder) Create(reimbursement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIReimbursementRepository)(nil).Create), reimbursement)
}

// GetByUserAndPeriod mocks base method.
func (m *MockIReimbursementRepository) GetByUserAndPeriod(userID, periodID uuid.UUID) ([]models.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserAndPeriod", userID, periodID)
	ret0, _ := ret[0].([]models.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserAndPeriod indicates an expected call of GetByUserAndPeriod.
func (mr *MockIReimbursementRepositoryMockRecorder) GetByUserAndPeriod(userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserAndPeriod", reflect.TypeOf((*MockIReimbursementRepository)(nil).GetByUserAndPeriod), userID, periodID)
}

// MockIPayrollRepository is a mock of IPayrollRepository interface.
type MockIPayrollRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPayrollRepositoryMockRecorder
}

// MockIPayrollRepositoryMockRecorder is the mock recorder for MockIPayrollRepository.
type MockIPayrollRepositoryMockRecorder struct {
	mock *MockIPayrollRepository
}

// NewMockIPayrollRepository creates a new mock instance.
func NewMockIPayrollRepository(ctrl *gomock.Controller) *MockIPayrollRepository {
	mock := &MockIPayrollRepository{ctrl: ctrl}
	mock.recorder = &MockIPayrollRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPayrollRepository) EXPECT() *MockIPayrollRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPayrollRepository) Create(payroll *models.Payroll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", payroll)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPayrollRepositoryMockRecorder) Create(payroll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPayrollRepository)(nil).Create), payroll)
}

// CreatePayrollItem mocks base method.
func (m *MockIPayrollRepository) CreatePayrollItem(item *models.PayrollItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayrollItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayrollItem indicates an expected call of CreatePayrollItem.
func (mr *MockIPayrollRepositoryMockRecorder) CreatePayrollItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayrollItem", reflect.TypeOf((*MockIPayrollRepository)(nil).CreatePayrollItem), item)
}

// GetAllPayrollItemsByPeriod mocks base method.
func (m *MockIPayrollRepository) GetAllPayrollItemsByPeriod(periodID uuid.UUID) ([]models.PayrollItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPayrollItemsByPeriod", periodID)
	ret0, _ := ret[0].([]models.PayrollItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPayrollItemsByPeriod indicates an expected call of GetAllPayrollItemsByPeriod.
func (mr *MockIPayrollRepositoryMockRecorder) GetAllPayrollItemsByPeriod(periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPayrollItemsByPeriod", reflect.TypeOf((*MockIPayrollRepository)(nil).GetAllPayrollItemsByPeriod), periodID)
}

// GetByPeriodID mocks base method.
func (m *MockIPayrollRepository) GetByPeriodID(periodID uuid.UUID) (*models.Payroll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPeriodID", periodID)
	ret0, _ := ret[0].(*models.Payroll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPeriodID indicates an expected call of GetByPeriodID.
func (mr *MockIPayrollRepositoryMockRecorder) GetByPeriodID(periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPeriodID", reflect.TypeOf((*MockIPayrollRepository)(nil).GetByPeriodID), periodID)
}

// GetPayrollItemsByPeriodAndUser mocks base method.
func (m *MockIPayrollRepository) GetPayrollItemsByPeriodAndUser(periodID, userID uuid.UUID) (*models.PayrollItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayrollItemsByPeriodAndUser", periodID, userID)
	ret0, _ := ret[0].(*models.PayrollItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayrollItemsByPeriodAndUser indicates an expected call of GetPayrollItemsByPeriodAndUser.
func (mr *MockIPayrollRepositoryMockRecorder) GetPayrollItemsByPeriodAndUser(periodID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayrollItemsByPeriodAndUser", reflect.TypeOf((*MockIPayrollRepository)(nil).GetPayrollItemsByPeriodAndUser), periodID, userID)
}

// MockIAuditLogRepository is a mock of IAuditLogRepository interface.
type MockIAuditLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAuditLogRepositoryMockRecorder
}

// MockIAuditLogRepositoryMockRecorder is the mock recorder for MockIAuditLogRepository.
type MockIAuditLogRepositoryMockRecorder struct {
	mock *MockIAuditLogRepository
}

// NewMockIAuditLogRepository creates a new mock instance.
func NewMockIAuditLogRepository(ctrl *gomock.Controller) *MockIAuditLogRepository {
	mock := &MockIAuditLogRepository{ctrl: ctrl}
	mock.recorder = &MockIAuditLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuditLogRepository) EXPECT() *MockIAuditLogRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAuditLogRepository) Create(log *models.AuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIAuditLogRepositoryMockRecorder) Create(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAuditLogRepository)(nil).Create), log)
}

// GetByTableAndRecord mocks base method.
func (m *MockIAuditLogRepository) GetByTableAndRecord(tableName string, recordID uuid.UUID) ([]models.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTableAndRecord", tableName, recordID)
	ret0, _ := ret[0].([]models.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTableAndRecord indicates an expected call of GetByTableAndRecord.
func (mr *MockIAuditLogRepositoryMockRecorder) GetByTableAndRecord(tableName, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTableAndRecord", reflect.TypeOf((*MockIAuditLogRepository)(nil).GetByTableAndRecord), tableName, recordID)
}
