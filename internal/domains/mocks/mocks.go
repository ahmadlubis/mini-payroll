// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_domains is a generated GoMock package.
package mock_domains

import (
	domains "payslip-system/internal/domains"
	models "payslip-system/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIAdminService is a mock of IAdminService interface.
type MockIAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockIAdminServiceMockRecorder
}

// MockIAdminServiceMockRecorder is the mock recorder for MockIAdminService.
type MockIAdminServiceMockRecorder struct {
	mock *MockIAdminService
}

// NewMockIAdminService creates a new mock instance.
func NewMockIAdminService(ctrl *gomock.Controller) *MockIAdminService {
	mock := &MockIAdminService{ctrl: ctrl}
	mock.recorder = &MockIAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdminService) EXPECT() *MockIAdminServiceMockRecorder {
	return m.recorder
}

// CreateAttendancePeriod mocks base method.
func (m *MockIAdminService) CreateAttendancePeriod(startDate, endDate time.Time, adminID uuid.UUID, ipAddress, requestID string) (*models.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendancePeriod", startDate, endDate, adminID, ipAddress, requestID)
	ret0, _ := ret[0].(*models.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttendancePeriod indicates an expected call of CreateAttendancePeriod.
func (mr *MockIAdminServiceMockRecorder) CreateAttendancePeriod(startDate, endDate, adminID, ipAddress, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendancePeriod", reflect.TypeOf((*MockIAdminService)(nil).CreateAttendancePeriod), startDate, endDate, adminID, ipAddress, requestID)
}

// MockIAttendanceService is a mock of IAttendanceService interface.
type MockIAttendanceService struct {
	ctrl     *gomock.Controller
	recorder *MockIAttendanceServiceMockRecorder
}

// MockIAttendanceServiceMockRecorder is the mock recorder for MockIAttendanceService.
type MockIAttendanceServiceMockRecorder struct {
	mock *MockIAttendanceService
}

// NewMockIAttendanceService creates a new mock instance.
func NewMockIAttendanceService(ctrl *gomock.Controller) *MockIAttendanceService {
	mock := &MockIAttendanceService{ctrl: ctrl}
	mock.recorder = &MockIAttendanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAttendanceService) EXPECT() *MockIAttendanceServiceMockRecorder {
	return m.recorder
}

// SubmitAttendance mocks base method.
func (m *MockIAttendanceService) SubmitAttendance(userID uuid.UUID, date, checkInTime time.Time, ipAddress, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAttendance", userID, date, checkInTime, ipAddress, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitAttendance indicates an expected call of SubmitAttendance.
func (mr *MockIAttendanceServiceMockRecorder) SubmitAttendance(userID, date, checkInTime, ipAddress, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttendance", reflect.TypeOf((*MockIAttendanceService)(nil).SubmitAttendance), userID, date, checkInTime, ipAddress, requestID)
}

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockIAuthService) Login(username, password string) (*models.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockIAuthServiceMockRecorder) Login(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAuthService)(nil).Login), username, password)
}

// ValidateToken mocks base method.
func (m *MockIAuthService) ValidateToken(tokenString string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockIAuthServiceMockRecorder) ValidateToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockIAuthService)(nil).ValidateToken), tokenString)
}

// MockIOvertimeService is a mock of IOvertimeService interface.
type MockIOvertimeService struct {
	ctrl     *gomock.Controller
	recorder *MockIOvertimeServiceMockRecorder
}

// MockIOvertimeServiceMockRecorder is the mock recorder for MockIOvertimeService.
type MockIOvertimeServiceMockRecorder struct {
	mock *MockIOvertimeService
}

// NewMockIOvertimeService creates a new mock instance.
func NewMockIOvertimeService(ctrl *gomock.Controller) *MockIOvertimeService {
	mock := &MockIOvertimeService{ctrl: ctrl}
	mock.recorder = &MockIOvertimeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOvertimeService) EXPECT() *MockIOvertimeServiceMockRecorder {
	return m.recorder
}

// SubmitOvertime mocks base method.
func (m *MockIOvertimeService) SubmitOvertime(userID uuid.UUID, date time.Time, hours float64, ipAddress, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOvertime", userID, date, hours, ipAddress, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitOvertime indicates an expected call of SubmitOvertime.
func (mr *MockIOvertimeServiceMockRecorder) SubmitOvertime(userID, date, hours, ipAddress, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOvertime", reflect.TypeOf((*MockIOvertimeService)(nil).SubmitOvertime), userID, date, hours, ipAddress, requestID)
}

// MockIPayrollService is a mock of IPayrollService interface.
type MockIPayrollService struct {
	ctrl     *gomock.Controller
	recorder *MockIPayrollServiceMockRecorder
}

// MockIPayrollServiceMockRecorder is the mock recorder for MockIPayrollService.
type MockIPayrollServiceMockRecorder struct {
	mock *MockIPayrollService
}

// NewMockIPayrollService creates a new mock instance.
func NewMockIPayrollService(ctrl *gomock.Controller) *MockIPayrollService {
	mock := &MockIPayrollService{ctrl: ctrl}
	mock.recorder = &MockIPayrollServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPayrollService) EXPECT() *MockIPayrollServiceMockRecorder {
	return m.recorder
}

// GeneratePayrollSummary mocks base method.
func (m *MockIPayrollService) GeneratePayrollSummary(periodID uuid.UUID) (*domains.PayrollSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePayrollSummary", periodID)
	ret0, _ := ret[0].(*domains.PayrollSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePayrollSummary indicates an expected call of GeneratePayrollSummary.
func (mr *MockIPayrollServiceMockRecorder) GeneratePayrollSummary(periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePayrollSummary", reflect.TypeOf((*MockIPayrollService)(nil).GeneratePayrollSummary), periodID)
}

// GeneratePayslip mocks base method.
func (m *MockIPayrollService) GeneratePayslip(userID, periodID uuid.UUID) (*domains.PayslipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePayslip", userID, periodID)
	ret0, _ := ret[0].(*domains.PayslipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePayslip indicates an expected call of GeneratePayslip.
func (mr *MockIPayrollServiceMockRecorder) GeneratePayslip(userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePayslip", reflect.TypeOf((*MockIPayrollService)(nil).GeneratePayslip), userID, periodID)
}

// ProcessPayroll mocks base method.
func (m *MockIPayrollService) ProcessPayroll(periodID, adminID uuid.UUID, ipAddress, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayroll", periodID, adminID, ipAddress, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPayroll indicates an expected call of ProcessPayroll.
func (mr *MockIPayrollServiceMockRecorder) ProcessPayroll(periodID, adminID, ipAddress, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayroll", reflect.TypeOf((*MockIPayrollService)(nil).ProcessPayroll), periodID, adminID, ipAddress, requestID)
}

// MockIReimbursementService is a mock of IReimbursementService interface.
type MockIReimbursementService struct {
	ctrl     *gomock.Controller
	recorder *MockIReimbursementServiceMockRecorder
}

// MockIReimbursementServiceMockRecorder is the mock recorder for MockIReimbursementService.
type MockIReimbursementServiceMockRecorder struct {
	mock *MockIReimbursementService
}

// NewMockIReimbursementService creates a new mock instance.
func NewMockIReimbursementService(ctrl *gomock.Controller) *MockIReimbursementService {
	mock := &MockIReimbursementService{ctrl: ctrl}
	mock.recorder = &MockIReimbursementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReimbursementService) EXPECT() *MockIReimbursementServiceMockRecorder {
	return m.recorder
}

// SubmitReimbursement mocks base method.
func (m *MockIReimbursementService) SubmitReimbursement(userID uuid.UUID, amount float64, description, ipAddress, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReimbursement", userID, amount, description, ipAddress, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitReimbursement indicates an expected call of SubmitReimbursement.
func (mr *MockIReimbursementServiceMockRecorder) SubmitReimbursement(userID, amount, description, ipAddress, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReimbursement", reflect.TypeOf((*MockIReimbursementService)(nil).SubmitReimbursement), userID, amount, description, ipAddress, requestID)
}
